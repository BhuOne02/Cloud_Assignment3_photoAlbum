AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to deploy two Lambda functions, API Gateway, two S3 buckets (frontend and storage),
  and the necessary IAM roles and policies.

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-frontend'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false
        RestrictPublicBuckets: false



  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-storage'

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            "Action": [
                "s3:GetObject",
                "s3:PutObject"
            ]
            Resource:
              - !Sub 'arn:aws:s3:::${FrontendBucket}/*'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${StorageBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${StorageBucket}'
        - PolicyName: OpenSearchAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpGet
                  - es:ESHttpPut
                Resource: '*'
        - PolicyName: RekognitionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                Resource: '*'

  LambdaFunctionLf2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Lf2'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import urllib
          from opensearchpy import OpenSearch, RequestsHttpConnection
          import time
          import base64
          
          # Configure logger for debugging
          log_handler = logging.getLogger()
          log_handler.setLevel(logging.DEBUG)
          
          # Initialize AWS clients and OpenSearch connection
          rekognition_client = boto3.client('rekognition', region_name='us-east-1')
          s3_service = boto3.client('s3')
          search_client = OpenSearch(
              hosts=[{'host': 'search-photos-vl5oki2mvw64szoi6xjrugtr5m.us-east-1.es.amazonaws.com', 'port': 443}],
              http_auth=('admin', 'Admin@123'),
              use_ssl=True,
              verify_certs=True,
              connection_class=RequestsHttpConnection
          )
          
          # Extract bucket name and object key from S3 event
          def extract_s3_details(event):
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              object_key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])
              log_handler.debug(f"Extracted bucket: {bucket_name}, object key: {object_key}")
              return bucket_name, object_key
          
          # Index photo metadata and labels into OpenSearch
          def index_photo_metadata(bucket_name, object_key, labels_list):
              log_handler.debug(f"Indexing object '{object_key}' from bucket '{bucket_name}' into OpenSearch")
              document_body = {
                  'bucket': bucket_name,
                  'key': object_key,
                  'createdTimestamp': str(int(time.time())),
                  'labels': labels_list
              }
              response = search_client.index(index="photo_metadata", id=object_key, body=document_body, refresh=True)
              log_handler.debug(f"OpenSearch indexing response: {response}")
          
          # Lambda handler function
          def lambda_handler(event, context):
              bucket_name, object_key = extract_s3_details(event)
              log_handler.info(f"Processing object '{object_key}' from bucket '{bucket_name}'")
          
              # Retrieve the object from S3
              s3_object = s3_service.get_object(Bucket=bucket_name, Key=object_key)
              object_content = s3_object['Body'].read()
              decoded_content = base64.b64decode(object_content)
          
              # Detect labels using Rekognition
              rekognition_response = rekognition_client.detect_labels(
                  Image={'Bytes': decoded_content},
                  MaxLabels=10,
                  MinConfidence=80
              )
              detected_labels = [label['Name'] for label in rekognition_response['Labels']]
              log_handler.debug(f"Detected labels from Rekognition: {detected_labels}")
          
              # Extract custom metadata labels
              metadata = s3_service.head_object(Bucket=bucket_name, Key=object_key)
              custom_labels = metadata['ResponseMetadata']['HTTPHeaders'].get('x-amz-meta-customlabels', '').split(',')
              all_labels = custom_labels + detected_labels
              log_handler.debug(f"Aggregated labels: {all_labels}")
          
              # Save metadata and labels to OpenSearch
              if all_labels:
                  index_photo_metadata(bucket_name, object_key, all_labels)
                  log_handler.info(f"Successfully indexed object '{object_key}'")
          
              # Update the object in S3 with the original content
              time.sleep(10)  # Delay to ensure operations are completed
              s3_service.delete_object(Bucket=bucket_name, Key=object_key)
              s3_service.put_object(Bucket=bucket_name, Body=decoded_content, Key=object_key, ContentType='image/jpg')

  LambdaFunctionSearchPhotos:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-SearchPhotos'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          from opensearchpy import OpenSearch, RequestsHttpConnection
          
          # Initialize Lex client and logger
          lex_runtime_client = boto3.client('lexv2-runtime')
          log_handler = logging.getLogger()
          log_handler.setLevel(logging.DEBUG)
          
          # Configure OpenSearch connection
          search_service = OpenSearch(
              hosts=[{'host': 'search-photos-vl5oki2mvw64szoi6xjrugtr5m.us-east-1.es.amazonaws.com', 'port': 443}],
              http_auth=('admin', 'Admin@123'),
              use_ssl=True,
              verify_certs=True,
              connection_class=RequestsHttpConnection
          )
          
          # Validate if the given string is meaningful
          def is_valid_string(input_string):
              return bool(input_string and input_string.strip())
          
          # Extract relevant labels from Lex slots
          def extract_labels_from_slots(slot_data):
              extracted_labels = []
              for slot_name, slot_info in slot_data.items():
                  if slot_info and "value" in slot_info:
                      interpreted_value = slot_info['value'].get('interpretedValue')
                      if interpreted_value:
                          extracted_labels.append(interpreted_value)
              return extracted_labels
          
          # Retrieve image metadata from OpenSearch based on labels
          def fetch_images_by_labels(label_list):
              image_metadata = []
              log_handler.debug(f"Searching images with labels: {label_list}")
              for label in label_list:
                  search_response = search_service.search({"query": {"match": {"labels": label}}})
                  hits = search_response['hits']['hits']
                  for hit in hits:
                      image_metadata.append(hit['_source'])
              return image_metadata
          
          # Lambda function handler
          def lambda_handler(event, context):
              log_handler.debug(f"Lambda context: {context}")
              log_handler.debug(f"Lambda event: {event}")
          
              user_query = event.get("query", "")
              log_handler.info(f"User input query: {user_query}")
          
              # Lex bot configuration
              bot_id = 'PW9WLMFRZQ'
              bot_alias_id = '9BXMDQ8VZI'
              locale_id = 'en_US'
          
              # Process input with Lex
              lex_response = lex_runtime_client.recognize_text(
                  botId=bot_id,
                  botAliasId=bot_alias_id,
                  localeId=locale_id,
                  sessionId="001",
                  text=user_query
              )
              log_handler.debug(f"Lex response: {lex_response}")
          
              # Extract labels from Lex response
              slot_data = lex_response.get('sessionState', {}).get('intent', {}).get('slots', {})
              log_handler.debug(f"Lex slot data: {slot_data}")
              labels_to_search = extract_labels_from_slots(slot_data)
              log_handler.info(f"Extracted labels: {labels_to_search}")
          
              # Fetch images from OpenSearch
              image_data = fetch_images_by_labels(labels_to_search)
              log_handler.info(f"Retrieved image metadata: {image_data}")
          
              # Prepare HTTP response
              return {
                  'headers': {
                      'Access-Control-Allow-Headers': '*',
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'statusCode': 200,
                  'body': json.dumps(image_data)
              }

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: API Gateway for Lambda functions

  ApiGatewayResourceSearch:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: search
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodSearchGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSearch
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaFunctionSearchPhotos.Arn}/invocations
          - { Region: !Ref 'AWS::Region' }
      MethodResponses:
        - StatusCode: 200

  ApiGatewayMethodSearchOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSearch
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ApiGatewayResourceUpload:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: upload
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceUploadBucket:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResourceUpload
      PathPart: "{bucket}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceUploadFilename:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResourceUploadBucket
      PathPart: "{filename}"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodUploadPUT:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceUploadFilename
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaFunctionLf2.Arn}/invocations
          - { Region: !Ref 'AWS::Region' }
      MethodResponses:
        - StatusCode: 200

  ApiGatewayMethodUploadOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceUploadFilename
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
    DependsOn:
      - ApiGatewayMethodSearchGET
      - ApiGatewayMethodSearchOPTIONS
      - ApiGatewayMethodUploadPUT
      - ApiGatewayMethodUploadOPTIONS

  LambdaPermissionSearchPhotos:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionSearchPhotos
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search'

  LambdaPermissionLf2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionLf2
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/PUT/upload/*/*'

Outputs:
  FrontendURL:
    Description: "URL of the frontend S3 bucket website"
    Value: !GetAtt FrontendBucket.WebsiteURL
